//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package support;


import cn.hutool.core.io.FileUtil;
import cn.hutool.core.util.RuntimeUtil;
import cn.hutool.core.util.ZipUtil;
import support.model.ModelBehavior;
import support.model.ModelEvent;
import support.model.ModelService;
import support.model.Parameter;
import support.utils.DataUtils;
import support.utils.PathUtils;

import java.io.File;
import java.nio.file.Path;
import java.util.List;

public class ModelEncapsulation implements Instance {

   public   ModelService modelService;

    public ModelEncapsulation(ModelService modelService) {
        this.modelService = modelService;
    }



    @Override
    public void run(String instanceId){
        ModelBehavior behavior = modelService.getBehavior();
        Path assemblySpace=PathUtils.getAssembly();
        Path workSpace=PathUtils.getWorkSpace(instanceId);
        FileUtil.copyFilesFromDir(assemblySpace.toFile(),workSpace.toFile(),true);

        File fileInput = workSpace.resolve("inputVariables.csv").toFile();
        String y = null,xList = null;
        List<ModelEvent> inputs = behavior.getInputs();
        for (ModelEvent input : inputs) {

            DataUtils.download(input.getDataServiceId(), fileInput);
        }

        List<Parameter> parameters = behavior.getParameters();
        for (Parameter parameter : parameters) {
            if(parameter.getName().equals("Y")){
                y=parameter.getValue();
            }else{
                xList=parameter.getValue();
            }
        }

        String cmd;
        //注意正常来说，R的环境变量应该动态获取，但是目前在这里写死了
        cmd="D:\\R-4.0.0\\bin\\Rscript geodetector.R "+fileInput.getAbsolutePath()+" "+y+" "+xList;
        Process process = RuntimeUtil.exec(null, workSpace.toFile(), new String[]{cmd});
        RuntimeUtil.getResult(process);

        List<ModelEvent> outputs = behavior.getOutputs();

        Boolean hasInteractionAndEcologicalFlag=true;
        if(xList.split(",").length>1){
            hasInteractionAndEcologicalFlag=false;
        }

        for (ModelEvent output : outputs) {
            if(output.getName().equals("risk_detector")){
                List<File> fileList = FileUtil.loopFiles(workSpace.toFile(), (file) -> file.getName().startsWith("out_risk_"));
                File[] files = fileList.toArray(new File[fileList.size()]);
                ZipUtil.zip(workSpace.resolve("out_risk.zip").toFile(),false,files);
                output.setDataServiceId(DataUtils.upload(workSpace.resolve("out_risk.zip").toFile()));
            }else if(output.getName().equals("factor_detector")){
                output.setDataServiceId(DataUtils.upload(workSpace.resolve("out_factor.csv").toFile()));
            }else if(output.getName().equals("ecological_detector")&&hasInteractionAndEcologicalFlag==true){
                output.setDataServiceId(DataUtils.upload(workSpace.resolve("out_ecological.csv").toFile()));
            }else if(output.getName().equals("interaction_detector")&&hasInteractionAndEcologicalFlag==true){
                output.setDataServiceId(DataUtils.upload(workSpace.resolve("out_interaction.csv").toFile()));
            }

        }
    }
}
